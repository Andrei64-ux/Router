Theodor-Gabriel Tulba-Lecu
311CA

        Homework #1: Router

    This README is a summary of the first homework for the 
    Communication Protocols course.

    The project's hierarchy is the following:
	- skel.c/skel.h & queue.c/queue.h & list.c/list.h:
	    helper functions and data structures given by the homework

    - arp_table.c/arp_table.h
        an implementation of a dynamically resizable array that
        stores pairs of ip and mac addresses of the arp table.

    - trie.c/trie.h
        a trie data structure that parses and stores the static
        routing table of the router given as a parameter.

    - router.c
        the main runner code for the router, it implements the
        routing process.

    - a Makefile which has the following rules:
        - build:
            compiles the source code for the homework into an executable

        - clean:
            deletes the compiled binaries and static libraries

    - this README

Implementation Details & Problems encountered:
    The code in router.c is commented, here are some other details.

    Trie:
        The trie structure was implemented for the bonus task of
        lab 04 with my colleagues (we work in teams).

    Arp Table:
        The table when it resizes itself it doubles it's capacity
        for O(1) amortised time complexity.

    Arp packets:
        responding to a request was fairly simple, so was processing
        an arp reply.

    Routing process:
        I followed mostly the instructions in the homework, in a
        slightly different order (I firstly checked the arp packets)

    ICMP packets:
        I send an ICMP ECHO REPLY only if the ICMP ECHO is for the
        router's interface ip.
        I send an ICMP TIME EXCEEDED if ttl <= 1
        I send an ICMP PORT UNREACH if i couldn't find a next hop
        in the routing table.

    Sending an ARP REQUEST:
        If i didn't find the mac address in the arp table,
        i add the packet to the packets queue and send an arp
        request to the entry's next hop.

    I also implemented the bonus RFC 1624 incremental checksum
    algorithm.
